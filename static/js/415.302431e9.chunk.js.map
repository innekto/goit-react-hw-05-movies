{"version":3,"file":"static/js/415.302431e9.chunk.js","mappings":"yOAGaA,EAAOC,EAAAA,GAAAA,GAAH,wIAOJC,EAAOD,EAAAA,GAAAA,GAAH,+CAIJE,GAAUF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,uIAWPI,EAAeJ,EAAAA,GAAAA,IAAH,+C,GAIWA,EAAAA,GAAAA,IAAH,2F,QCyBjC,EAhDmB,SAAC,GAA8B,IAA5BK,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACtBC,GAAWC,EAAAA,EAAAA,MACjB,GAAgDC,EAAAA,EAAAA,UAAS,GAAzD,eAAOC,EAAP,KAAyBC,EAAzB,KAEMC,EAAkB,WACtBD,EAAoBD,EAAmB,EACxC,EAUD,OANAG,EAAAA,EAAAA,YAAU,WACJH,IAAqBL,EAAOS,QAC9BR,GAAa,EAEhB,GAAE,CAACI,EAAkBL,EAAOS,OAAQR,KAGnC,SAACP,EAAD,UACGM,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIC,EAAd,EAAcA,OAAd,OACV,SAACjB,EAAD,WACE,UAACC,EAAD,CAASiB,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMd,GAA7C,WACE,SAACH,EAAD,WACE,gBACEkB,IAAKJ,EACLK,IAAKP,EACLQ,OAAQZ,EACRa,QAASb,OAGb,wBAAKI,QAVEC,EADD,KAiBjB,C,8ECPD,UA3Ba,WACX,OAA6DS,EAAAA,EAAAA,KAArDrB,EAAR,EAAQA,OAAQsB,EAAhB,EAAgBA,UAAWrB,EAA3B,EAA2BA,aAAcsB,EAAzC,EAAyCA,gBACxBC,GAAUC,EAAAA,EAAAA,QAAOF,GAA1BG,QAUR,OARAlB,EAAAA,EAAAA,YAAU,WACR,IAAMmB,EAAa,IAAIC,gBAEvB,OADAJ,EAAM,CAAEK,YAAa,sBAAuBF,WAAAA,IACrC,WACLA,EAAWG,OACZ,CACF,GAAE,CAACN,KAGF,gCACGF,IACEtB,EAAOS,SACR,SAAC,IAAD,CACET,OAAQA,EACRsB,UAAWA,EACXrB,aAAcA,KAGlB,SAAC,IAAD,MAGL,C","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MoviesList.jsx","pages/Home.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n  grid-gap: 20px;\n  padding-top: 20px;\n`;\n\nexport const Item = styled.li`\n  text-align: center;\n`;\n\nexport const NavLink = styled(Link)`\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: #2b96c8;\n  }\n`;\n\nexport const ImageWrapper = styled.div`\n  position: relative;\n`;\n\nexport const ProgressBarContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n\n  width: 50px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport PropTypes, { shape } from 'prop-types';\n\nimport { List, Item, ImageWrapper, NavLink } from './MovieList.styled';\n\nconst MoviesList = ({ movies, setIsLoading }) => {\n  const location = useLocation();\n  const [loadedImageCount, setLoadedImageCount] = useState(0);\n  //викликаємо при успішному завантаженні зображення\n  const handleImageLoad = () => {\n    setLoadedImageCount(loadedImageCount + 1);\n  };\n\n  //якщо кількість завантажених зображень дорівнює загальній кількості фільмів,\n  //встановлюємо isLoading в false, щоб скрити індикатор завантаження.\n  useEffect(() => {\n    if (loadedImageCount === movies.length) {\n      setIsLoading(false);\n    }\n  }, [loadedImageCount, movies.length, setIsLoading]);\n\n  return (\n    <List>\n      {movies.map(({ title, id, poster }) => (\n        <Item key={id}>\n          <NavLink to={`/movies/${id}`} state={{ from: location }}>\n            <ImageWrapper>\n              <img\n                src={poster}\n                alt={title}\n                onLoad={handleImageLoad}\n                onError={handleImageLoad}\n              />\n            </ImageWrapper>\n            <h2>{title}</h2>\n          </NavLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\nMoviesList.propTypes = {\n  setIsLoading: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      averageVote: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import { useEffect, useRef } from 'react';\nimport MoviesList from 'components/MovieList/MoviesList';\n\nimport Message from 'components/Message/Message';\nimport useFetch from 'services/Hooks';\n// import Loader from 'components/Loader/Loader';\n\nconst Home = () => {\n  const { movies, isLoading, setIsLoading, fetchMoviesList } = useFetch();\n  const { current: fetch } = useRef(fetchMoviesList);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetch({ fetchParams: 'trending/movie/week', controller });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch]);\n\n  return (\n    <>\n      {isLoading}\n      {!!movies.length && (\n        <MoviesList\n          movies={movies}\n          isLoading={isLoading}\n          setIsLoading={setIsLoading}\n        />\n      )}\n      <Message />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["List","styled","Item","NavLink","Link","ImageWrapper","movies","setIsLoading","location","useLocation","useState","loadedImageCount","setLoadedImageCount","handleImageLoad","useEffect","length","map","title","id","poster","to","state","from","src","alt","onLoad","onError","useFetch","isLoading","fetchMoviesList","fetch","useRef","current","controller","AbortController","fetchParams","abort"],"sourceRoot":""}