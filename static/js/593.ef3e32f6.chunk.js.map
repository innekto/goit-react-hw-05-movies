{"version":3,"file":"static/js/593.ef3e32f6.chunk.js","mappings":"yOAGaA,EAAOC,EAAAA,GAAAA,GAAH,wIAOJC,EAAOD,EAAAA,GAAAA,GAAH,+CAIJE,GAAUF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,uIAWPI,EAAeJ,EAAAA,GAAAA,IAAH,+C,GAIWA,EAAAA,GAAAA,IAAH,2F,QCyBjC,EAhDmB,SAAC,GAA8B,IAA5BK,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACtBC,GAAWC,EAAAA,EAAAA,MACjB,GAAgDC,EAAAA,EAAAA,UAAS,GAAzD,eAAOC,EAAP,KAAyBC,EAAzB,KAEMC,EAAkB,WACtBD,EAAoBD,EAAmB,EACxC,EAUD,OANAG,EAAAA,EAAAA,YAAU,WACJH,IAAqBL,EAAOS,QAC9BR,GAAa,EAEhB,GAAE,CAACI,EAAkBL,EAAOS,OAAQR,KAGnC,SAACP,EAAD,UACGM,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIC,EAAd,EAAcA,OAAd,OACV,SAACjB,EAAD,WACE,UAACC,EAAD,CAASiB,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMd,GAA7C,WACE,SAACH,EAAD,WACE,gBACEkB,IAAKJ,EACLK,IAAKP,EACLQ,OAAQZ,EACRa,QAASb,OAGb,wBAAKI,QAVEC,EADD,KAiBjB,C,kICvCYS,EAAkB1B,EAAAA,GAAAA,KAAH,kHAQf2B,EAAQ3B,EAAAA,GAAAA,MAAH,sJASL4B,EAAS5B,EAAAA,GAAAA,OAAH,uO,SCkBnB,EAjCmB,SAAC,GAAyB,IAAvB6B,EAAsB,EAAtBA,gBACpB,GAAsCpB,EAAAA,EAAAA,UAAS,IAA/C,eAAOqB,EAAP,KAAoBC,EAApB,KAcA,OACE,UAACL,EAAD,CAAiBM,SAbI,SAAAC,GACrBA,EAAEC,iBACGJ,EAAYK,SACjBN,EAAgB,CAAEO,MAAON,EAAYK,OAAOE,gBAC5CN,EAAe,IAChB,EAQC,WACE,SAACJ,EAAD,CACEW,KAAK,OACLC,KAAK,QACLC,MAAOV,EACPW,YAAY,gBACZC,aAAa,MACbC,WAAS,EACTC,SAdiB,SAAAX,GACrB,IAAQO,EAAUP,EAAEY,cAAZL,MACRT,EAAeS,EAChB,KAaG,SAACZ,EAAD,CAAQU,KAAK,SAAb,sBAGL,E,2BCSD,EAlCe,WACb,OAA6DQ,EAAAA,EAAAA,KAArDzC,EAAR,EAAQA,OAAQ0C,EAAhB,EAAgBA,gBAAiBC,EAAjC,EAAiCA,UAAW1C,EAA5C,EAA4CA,aAC3B2C,GAAUC,EAAAA,EAAAA,QAAOH,GAA1BI,QACR,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBxB,EAArB,KACQO,GAAUkB,EAAAA,EAAAA,UAChB,kBAAMC,OAAOC,aAAP,OAAuBH,GAA7B,GACA,CAACA,IAFKjB,MAkBR,OAbAvB,EAAAA,EAAAA,YAAU,WACR,GAAKuB,EAAL,CACA,IAAMqB,EAAa,IAAIC,gBAMvB,OALAT,EAAM,CACJQ,WAAAA,EACAE,YAAa,eACbvB,MAAAA,IAEK,WACLqB,EAAWG,OACZ,CATiB,CAUnB,GAAE,CAACX,EAAOb,KAGT,iCACE,SAAC,EAAD,CAAYP,gBAAiBA,IAC5BmB,IACE3C,EAAOS,SACR,SAAC+C,EAAA,EAAD,CAAYxD,OAAQA,EAAQC,aAAcA,KAE5C,SAACwD,EAAA,EAAD,MAGL,C","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MoviesList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n  grid-gap: 20px;\n  padding-top: 20px;\n`;\n\nexport const Item = styled.li`\n  text-align: center;\n`;\n\nexport const NavLink = styled(Link)`\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:hover,\n  &:focus {\n    color: #2b96c8;\n  }\n`;\n\nexport const ImageWrapper = styled.div`\n  position: relative;\n`;\n\nexport const ProgressBarContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n\n  width: 50px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport PropTypes, { shape } from 'prop-types';\n\nimport { List, Item, ImageWrapper, NavLink } from './MovieList.styled';\n\nconst MoviesList = ({ movies, setIsLoading }) => {\n  const location = useLocation();\n  const [loadedImageCount, setLoadedImageCount] = useState(0);\n  //викликаємо при успішному завантаженні зображення\n  const handleImageLoad = () => {\n    setLoadedImageCount(loadedImageCount + 1);\n  };\n\n  //якщо кількість завантажених зображень дорівнює загальній кількості фільмів,\n  //встановлюємо isLoading в false, щоб скрити індикатор завантаження.\n  useEffect(() => {\n    if (loadedImageCount === movies.length) {\n      setIsLoading(false);\n    }\n  }, [loadedImageCount, movies.length, setIsLoading]);\n\n  return (\n    <List>\n      {movies.map(({ title, id, poster }) => (\n        <Item key={id}>\n          <NavLink to={`/movies/${id}`} state={{ from: location }}>\n            <ImageWrapper>\n              <img\n                src={poster}\n                alt={title}\n                onLoad={handleImageLoad}\n                onError={handleImageLoad}\n              />\n            </ImageWrapper>\n            <h2>{title}</h2>\n          </NavLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\nMoviesList.propTypes = {\n  setIsLoading: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      averageVote: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const MovieSearchForm = styled.form`\n  width: 300px;\n  padding-top: 20px;\n  margin: 0 auto;\n  display: flex;\n  gap: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  background-color: #b4b7d3;\n`;\n\nexport const Button = styled.button`\n  padding: 4px 8px;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  background-color: #b4b7d3;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: teal;\n    color: white;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieSearchForm, Input, Button } from './SearchForm.styled';\n\nconst SearchForm = ({ setSearchParams }) => {\n  const [querySearch, setQuerySearch] = useState('');\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    if (!querySearch.trim()) return;\n    setSearchParams({ query: querySearch.trim().toLowerCase() });\n    setQuerySearch('');\n  };\n\n  const onHandleChange = e => {\n    const { value } = e.currentTarget;\n    setQuerySearch(value);\n  };\n\n  return (\n    <MovieSearchForm onSubmit={onHandleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        value={querySearch}\n        placeholder=\"Search movies\"\n        autoComplete=\"off\"\n        autoFocus\n        onChange={onHandleChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </MovieSearchForm>\n  );\n};\n\nSearchForm.propTypes = { setSearchParams: PropTypes.func.isRequired };\n\nexport default SearchForm;\n","import { useEffect, useMemo, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport MoviesList from 'components/MovieList/MoviesList';\nimport Message from 'components/Message/Message';\n\nimport useFetch from 'services/Hooks';\n\nconst Movies = () => {\n  const { movies, fetchMoviesList, isLoading, setIsLoading } = useFetch();\n  const { current: fetch } = useRef(fetchMoviesList);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const { query } = useMemo(\n    () => Object.fromEntries([...searchParams]),\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!query) return;\n    const controller = new AbortController();\n    fetch({\n      controller,\n      fetchParams: 'search/movie',\n      query,\n    });\n    return () => {\n      controller.abort();\n    };\n  }, [fetch, query]);\n\n  return (\n    <>\n      <SearchForm setSearchParams={setSearchParams} />\n      {isLoading}\n      {!!movies.length && (\n        <MoviesList movies={movies} setIsLoading={setIsLoading} />\n      )}\n      <Message />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["List","styled","Item","NavLink","Link","ImageWrapper","movies","setIsLoading","location","useLocation","useState","loadedImageCount","setLoadedImageCount","handleImageLoad","useEffect","length","map","title","id","poster","to","state","from","src","alt","onLoad","onError","MovieSearchForm","Input","Button","setSearchParams","querySearch","setQuerySearch","onSubmit","e","preventDefault","trim","query","toLowerCase","type","name","value","placeholder","autoComplete","autoFocus","onChange","currentTarget","useFetch","fetchMoviesList","isLoading","fetch","useRef","current","useSearchParams","searchParams","useMemo","Object","fromEntries","controller","AbortController","fetchParams","abort","MoviesList","Message"],"sourceRoot":""}